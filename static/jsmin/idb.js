class WebStore{constructor(e="WebCache",t="KeyStore"){this.storeName=t,this._dbase=new Promise((r,n)=>{const o=indexedDB.open(e,1);o.onerror=(()=>{n(o.error)}),o.onsuccess=(()=>{r(o.result)}),o.onupgradeneeded=(()=>{o.result.createObjectStore(t)})})}__IDBAct__(e,t){return this._dbase.then(r=>new Promise((n,o)=>{const _=r.transaction(this.storeName,e);_.oncomplete=(()=>n()),_.onabort=_.onerror=(()=>o()),t(_.objectStore(this.storeName))}))}}let store;function __defaultStore__(){try{return store||new WebStore}catch(e){return null}}function $get(e,t=__defaultStore__()){let r;return t.__IDBAct__("readonly",t=>{r=t.get(e)}).then(()=>r.result).catch(e=>null)}function $set(e,t,r=__defaultStore__()){return r.__IDBAct__("readwrite",r=>{r.put(t,e).catch(e=>null)})}function $del(e,t=__defaultStore__()){return t.__IDBAct__("readwrite",t=>{t.delete(e).catch(e=>null)})}function $__clear__(e=__defaultStore__()){return console.warn("clearing Store:",e),e.__IDBAct__("readwrite",e=>{e.clear().catch(e=>null)})}function $keys(e=__defaultStore__()){const t=[];return e.__IDBAct__("readonly",e=>{(e.openKeyCursor||e.openCursor).call(e).onsuccess=function(){this.result&&(t.push(this.result.key),this.result.continue())}}).then(()=>t).catch(e=>null)}