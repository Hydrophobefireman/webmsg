
@app.websocket("/@/messenger/")
@collect_websocket
async def messenger():
    socket_obj = None
    ws = websocket
    while 1:
        data = None
        __data = await ws.receive()
        print("SOCKET DATA\n", __data)
        if __data == "ping":
            # keep alive for heroku
            await ws.send("pong")
        else:
            try:
                data = json.loads(__data)
            except:
                await ws.send(json.dumps({"error": "Bad request"}))
            if not session.get("user") or not session.get("logged_in"):
                await ws.send(
                    json.dumps(
                        {"error": "Not Authenticated..did you clear your cookies?"}
                    )
                )
            has_falsey, falsey_vals = has_false_types(
                data, ("sender", "receiver", "chat_id", "message", "stamp")
            )
            if has_falsey:
                await ws.send(
                    json.dumps(
                        {
                            "error": f"No values provided for :{force_join(falsey_vals)} ."
                        }
                    )
                )
            sender = data["sender"]
            receiver = data["receiver"]
            chat_id = data["chat_id"]
            message = data["message"]
            tstamp = validate_stamp(data["stamp"])
            fetch = data.get("fetch_messages")
            fetch_from = data.get("fetch_from")
            read = data.get("read")
            media = data.get("media")
            chat_data = None
            if (
                not sender == data["sender"]
                or sender == data["receiver"]
                or not session.get("user") == sender
            ):
                await ws.send(json.dumps({"error": f"Invalid sender value {sender}"}))
            chat = verify_chat(session["user"], receiver, chat_id)
            if not chat:
                print(
                    f"Creating A new Chat between '{session['user']}' and '{receiver}'"
                )
                chat = create_chat_data(session["user"], receiver)
            else:
                print(
                    f"Using Existing Chat with id:{chat.id_};Participants:{session['user']}<=>{receiver}"
                )
            if message:
                print("message")
                _chat_data = {
                    "chat_id": chat_id,
                    "data": {
                        "message": message,
                        "sender": sender,
                        "receiver": receiver,
                        "stamp": tstamp,
                        "read": False,
                        "media": False,
                        "mediaURL": None,
                        "rstamp": None,
                    },
                }
                ind = alter_chat_data(_chat_data)
                to_send = json.dumps({**_chat_data["data"], "msgid": ind})
                _chat_data["msgid"] = ind
                print("[message]", ind)
                await ws.send(to_send)
                await _make_notify(session["user"], receiver, _chat_data)
            elif fetch:
                if not fetch_from:
                    await ws.send(
                        json.dumps(
                            {
                                "data": check_chat_data(id_=chat_id).chats,
                                "fetch": True,
                                "full_fetch": True,
                            }
                        )
                    )
                else:
                    _data = check_chat_data(id_=chat_id).chats
                    tsend = get_data_from(_data, fetch_from)
                    await ws.send(
                        json.dumps(
                            {
                                "data": tsend,
                                "full_fetch": False,
                                "fetch": True,
                                "fetched_from": fetch_from + 1,
                            }
                        )
                    )
            elif read and sender == session["user"]:
                print("read")
                data = read
                msgs = chat.chats
                idx = data.get("id")
                part_msg = msgs.get(idx)
                if not part_msg:
                    await ws.send(json.dumps({"error": "no_such_message"}))
                part_msg["read"] = True
                msgs[idx] = part_msg
                chat_data = {
                    "chat_id": chat_id,
                    "msgid": idx,
                    "update": {"read": True, "rstamp": tstamp},
                }
                alter_chat_data(chat_data, True)
                await _make_notify(sender, receiver, chat_data, True)
                await ws.send(json.dumps({"success": "ok"}))
            elif media:
                chat_data = {
                    "chat_id": chat_id,
                    "data": {
                        "message": None,
                        "sender": session["user"],
                        "stamp": tstamp,
                        "read": False,
                        "media": True,
                        "mediaURL": media,
                        "rstamp": None,
                        "receiver": receiver,
                    },
                }
                ind = alter_chat_data(chat_data)
                to_send = json.dumps({**chat_data["data"], "msgid": ind})
                chat_data["msgid"] = ind
                await _make_notify(session["user"], receiver, chat_data)
                await ws.send(json.dumps(to_send))
            else:
                await ws.send(json.dumps({"error": "Bad request"}))
    if socket_obj:
        print("Removing user")
        app.__sockets__.remove(socket_obj)
